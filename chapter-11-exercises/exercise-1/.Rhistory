install.packages(c("devtools", "fueleconomy"))
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
manufacturers <- vehicles[["make"]]
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(manufacturers)
manufacture_1997 <- vehicles[vehicles$year == "1997", ]
order(manufacture_1997, method = "hwy")
manufacture_1997[order(manufacture_1997$hwy), ]
count_unique <- count(unique(manufacturers))
manufacture_1997$average <- mean(vehicles$hwy, vehicles$cty)
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- vehicles[["make"]]
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
count_unique <- unique(manufacturers)
# are represented by the data set
count_unique <- unique(manufacturers)
print(count_unique)
# are represented by the data set
count_unique <- legnth(unique(manufacturers))
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- vehicles[["make"]]
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
legnth(unique(manufacturers))
length(unique(manufacturers))
manufacture_1997$average <- mean(vehicles$hwy + vehicles$cty)
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- vehicles[["make"]]
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
length(unique(manufacturers))
# Filter the data set for vehicles manufactured in 1997
manufacture_1997 <- vehicles[vehicles$year == "1997", ]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
manufacture_1997[order(manufacture_1997$hwy), ]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles7$average <- mean(vehicles$hwy + vehicles$cty)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
# What was the most efficient Honda model of 1995?
vehicles$average <- (vehicles$hwy + vehicles$cty)/2
Install "fueleconomy" dataset from GitHub
#devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- vehicles[["make"]]
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
length(unique(manufacturers))
# Filter the data set for vehicles manufactured in 1997
manufacture_1997 <- vehicles[vehicles$year == "1997", ]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
manufacture_1997[order(manufacture_1997$hwy), ]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles$average <- (vehicles$hwy + vehicles$cty)/2
filtered_vehicles_1 <- vehicles[vehicles$drive == "2-Wheel Drive" && vehicles$cty > 20, ]
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
filtered_vehicles_1 <- vehicles[vehicles$drive == "2-Wheel Drive" && vehicles$cty > 20, ]
View(filtered_vehicles_1)
# Save this new data frame in a variable.
filtered_vehicles_1 <- vehicles[vehicles$drive == "2-Wheel Drive" & vehicles$cty > 20, ]
View(filtered_vehicles_1)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_vehicle <- filtered_vehicles_1[filtered_vehicles_1$hwy == min(filtered_vehicles_1$hwy), ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filtered_vehicles_1[filtered_vehicles_1$hwy == min(filtered_vehicles_1$hwy), ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filtered_vehicles_1[filtered_vehicles_1$hwy == min(filtered_vehicles_1$hwy), "id"]
filtered_vehicles_1 <- vehicles[vehicles$drive == "2-Wheel Drive" & vehicles$cty > "20", ]
View(filtered_vehicles_1)
filtered_vehicles_1 <- vehicles[vehicles$drive == "2-Wheel Drive" & vehicles$cty > "20", ]
View(filtered_vehicles_1)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filtered_vehicles_1[filtered_vehicles_1$hwy == min(filtered_vehicles_1$hwy), "id"]
install.packages("dyplyr")
Yes
install.packages("dyplyr")
old.packages("dyplyr")
inst.packages("dyplyr")
# Install and load the "dplyr" library
install.packages("dyplyr")
# Install and load the "dplyr" library
install.packages("dpylyr")
# Install and load the "dplyr" library
install.packages("dpylr")
# Install and load the "dplyr" library
install.packages("dplyr")
library(fueleconomy)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
View(vehicles)
makes <- vehicles[["make"]]
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct_makes <- distinct(makes)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct_makes <- distinct.data(makes)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct_makes <- dplyr.distinct(makes)
# Install and load the "dplyr" library
#install.packages("dplyr")
library("dplyr")
library("dplyr")
library("dplyr")
library("dplyr")
makes <- select(vehicles, make)
install.packages("dplyr")
library("dplyr")
library("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
View(vehicles)
library("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
View(vehicles)
install.packages("pkgconfig")
install.packages("dplyr")
library("dplyr")
#install.packages("dplyr")
install.packages("pkgconfig")
library("dplyr")
library(dplyr)
install.packages("dplyr")
library(dplyr)
makes <- select(vehicles, make)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct_makes <- distinct(makes)
# Exercise 1: working with data frames (review)
# Install devtools package: allows installations from GitHub
#install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
#devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- vehicles[["make"]]
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
length(unique(manufacturers))
# Filter the data set for vehicles manufactured in 1997
manufacture_1997 <- vehicles[vehicles$year == "1997", ]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
manufacture_1997[order(manufacture_1997$hwy), ]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles$average <- (vehicles$hwy + vehicles$cty)/2
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
filtered_vehicles_1 <- vehicles[vehicles$drive == "2-Wheel Drive" & vehicles$cty > "20", ]
View(filtered_vehicles_1)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filtered_vehicles_1[filtered_vehicles_1$hwy == min(filtered_vehicles_1$hwy), "id"]
# Filter the data set for vehicles manufactured in 1997
cars_97 <- filter(vehicles, year == "1997")
# Arrange the 1997 cars by highway (`hwy`) gas milage
arrange(cars_97, hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
mutate(cars_97, average = (hwy + cty)/2)
mutated_ver <- mutate(cars_97, average = (hwy + cty)/2)
View(mutated_ver)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
filter(vehicles, drive == "2-Wheel Drive", cty > 20)
# Exercise 2: working with `dplyr`
# Note that this exercise repeats the analysis from Exercise 1, but should be
# performed using `dplyr` (do not directly access or manipulate the data frames)
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Install and load the "dplyr" library
#install.packages("dplyr")
library("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
View(vehicles)
makes <- select(vehicles, make)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct_makes <- distinct(makes)
# Filter the data set for vehicles manufactured in 1997
cars_97 <- filter(vehicles, year == "1997")
# Arrange the 1997 cars by highway (`hwy`) gas milage
arrange(cars_97, hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
mutated_ver <- mutate(cars_97, average = (hwy + cty)/2)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
fitlered_vehicles <- filter(vehicles, drive == "2-Wheel Drive", cty > 20)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library('nycflights13')
library(dplyr)
library('nycflights13')
library("nycflights13")
library(dplyr)
library("nycflights13")
library("nycflights13")
install.packages("nycflights13")
library("nycflights13")
View(flights)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
??flights
flights <- mutate(flights, delayed_in_air = arr_delay - dep_del)
View(flights)
flights <- mutate(flights, delayed_in_air = arr_delay - dep_delay)
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flights, delayed_in_air)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, delayed_in_air)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, avg = mean(delayed_in_air, na.rm = TRUE))
View(to_sea)
# origin, destination, and the "gain_in_air" column you just created
to_sea <- filter(flights, dest == "SEA")
View(to_sea)
to_sea <- select(to_sea, origin, dest, delay_in_air)
to_sea <- select(to_sea, origin, dest, delayed_in_air)
# On average, did flights to SeaTac gain or loose time?
summarize(to_sea, avg_delayed = mean(delayed_in_air, na.rm = TRUE))
flights %%
filter(dest == "SEA") %>%
select(origin, dest, delayed_in_air) %>%
summarize(avg_delayed, mean(delayed_in_air, na.rm = TRUE)) %>%
pull(avg_delayed)
