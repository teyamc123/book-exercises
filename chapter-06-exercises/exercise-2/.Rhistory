# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
print(fruits_o)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
# Exercise 2: using built-in string functions
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
?substr
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
?subtstr
nchar(lyric)
fruits <- substr(lyric, 15, nchar(lyric))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", fruits)
print(fruits_e)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
print(fruits_o)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
print(lyric_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
?substr
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
?subtstr
nchar(lyric)
fruits <- substr(lyric, 15, nchar(lyric))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
?gsub
fruits_e <- gsub("a", "ee", fruits)
print(fruits_e)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
print(fruits_o)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
print(lyric_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
#?substr
intro <- substr(lyric, 1, 13)
# Exercise 2: using built-in string functions
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
#?substr
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
#?subtstr
nchar(lyric)
fruits <- substr(lyric, 15, nchar(lyric))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
#?gsub
fruits_e <- gsub("a", "ee", fruits)
print(fruits_e)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
print(fruits_o)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
print(lyric_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
# Exercise 2: using built-in string functions
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
#?substr
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
#?subtstr
nchar(lyric)
fruits <- substr(lyric, 15, nchar(lyric))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
#?gsub
fruits_e <- gsub("a", "ee", fruits)
print(fruits_e)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
print(fruits_o)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
print(lyric_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
Create a variable `my_name` that contains your name
my_name <- "Teya"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name)
# Print the number of letters in your name
print(name_length)
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name, "is programming")
Create a variable `my_name` that contains your name
my_name <- "Teya"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name)
# Print the number of letters in your name
print(name_length)
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name, "is programming")
# Create a variable `my_name` that contains your name
my_name <- "Teya"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name)
# Print the number of letters in your name
print(name_length)
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name, "is programming")
# Make the `now_doing` variable upper case
toupper(now_doing)
# variables `fav_1` and `fav_2`
fav_1 <- 13
fav_2 <- 56
# Divide each number by the square root of 201 and save the new value in the
# original variable
fav_1 <- fav_1/sqrt(201)
fav_2 <- fav_2/sqrt(201)
variables `fav_1` and `fav_2`
fav_1 <- 13
fav_2 <- 56
# Divide each number by the square root of 201 and save the new value in the
# original variable
fav_1 <- fav_1/sqrt(201)
fav_2 <- fav_2/sqrt(201)
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
raw_sum <- sum(fav_1, fav_2)
# Pick two of your favorite numbers (between 1 and 100) and assign them to
# variables `fav_1` and `fav_2`
fav_1 <- 13
fav_2 <- 56
# Divide each number by the square root of 201 and save the new value in the
# original variable
fav_1 <- fav_1/sqrt(201)
fav_2 <- fav_2/sqrt(201)
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
raw_sum <- sum(fav_1, fav_2)
fav_1 <- 13
fav_2 <- 56
# Divide each number by the square root of 201 and save the new value in the
# original variable
fav_1 <- fav_1/sqrt(201)
fav_2 <- fav_2/sqrt(201)
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
raw_sum <- sum(fav_1, fav_2)
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
round_sum <- round(raw_sum)
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
round_1 <- round(fav_1)
round_2 <- round(fav_2)
sum_round <- sum(round_1, round_2)
max(sum_round, round_sum)
add_three(input_number)
{
return_value <- sum(input_number, 3)
print(return_value)
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
add_three <- function(input_number)
{
return_value <- sum(input_number, 3)
print(return_value)
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
imperial_to_metric <- function(number_feet, number_inches)
{
inches_to_feet <- number_inches/12
total_feet <- sum(number_feet, inches_to_feet)
new_metric <- total_feet * 0.305
return(new_metric)
}
imperial_to_metric <- function(number_feet, number_inches)
{
inches_to_feet <- number_inches/12
total_feet <- sum(number_feet, inches_to_feet)
new_metric <- total_feet * 0.305
return(new_metric)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 7)
add_three <- function(input_number)
{
return_value <- sum(input_number, 3)
return(return_value)
}
add_three <- function(input_number)
{
return_value <- sum(input_number, 3)
return(return_value)
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
add_three <- function(input_number)
{
return_value <- sum(input_number, 3)
}
return(return_value)
add_three <- function(input_number)
{
return_value <- sum(input_number, 3)
return(return_value)
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(number_feet, number_inches)
{
inches_to_feet <- number_inches/12
total_feet <- sum(number_feet, inches_to_feet)
new_metric <- total_feet * 0.3048
return(new_metric)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 7)
v1 <- 1:5
result <- v1 + 201
print(result)
v1 <- 0:5
result <- v1 + 201
print(result)
names <- c("Lena", "Michelle")
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
n <- n + 1
names <- c("Lena", "Michelle")
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
n <- n + 1
m <- seq(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
m <- seq(1, 10)
m <- seq(10, 1)
subtract_vectors <- n-m
# next to you. Print the vector.
names <- c("Lena", "Michelle")
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
n <- n + 1
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(10, 1)
# Subtract `m` FROM `n`. Note the recycling!
subtract_vectors <- n-m
print(subtract_vectors)
x_range <- seq(-5.0, 10.0)
x_range <- seq(-5.0, 10.0, 0.1)
sin_wave <- sin(x_range)
plot(cos_wave, sin_wave)
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- (sin_wave * cos_wave) + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(cos_wave, sin_wave)
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- (sin_wave * cos_wave)# + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(cos_wave, sin_wave)
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- (sin_wave * cos_wave) + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
n <- n + 1
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(10, 1)
# Subtract `m` FROM `n`. Note the recycling!
subtract_vectors <- n-m
print(subtract_vectors)
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5.0, 10.0, 0.1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- (sin_wave * cos_wave) + sin_wave
# Use the `plot
# the : operator)
first_ten <- 10:20
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- seq(21, 30)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten, next_ten)
eleventh <- all_numbers[11]
some_numbers <- all_numbers[2, 5]
some_numbers <- all_numbers[2:5]
filter <- c(TRUE, FALSE)
all_numbers[filter]
clear
all(FALSE, all_numbers)
all(TRUE, all_numbers)
filter <- c(TRUE, FALSE)
even <- all_numbers[filter]
first_ten <- 10:20
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- seq(21, 30)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten, next_ten)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2:5]
# Create a vector `even` that holds the even numbers from 1 to 100
filter <- c(TRUE, FALSE)
even <- all_numbers[filter]
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(TRUE, even)
all(even = FALSE)
all(even = TRUE)
all(even = 0)
all(even)
all(even % 2)
all(even %% 2)
# Exercise 2: indexing and filtering vectors
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- seq(21, 30)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten, next_ten)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2:5]
# Create a vector `even` that holds the even numbers from 1 to 100
filter <- c(TRUE, FALSE)
even <- all_numbers[filter]
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 2)
all(even)
?all
all(even %% 2)
all(even, "%%", 2)
even <- all_numbers[filter]
print(even)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- seq(21, 30)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten, next_ten)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2:5]
# Create a vector `even` that holds the even numbers from 1 to 100
filter <- c(TRUE, FALSE)
even <- all_numbers[filter]
print(even)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even, "%%", 2)
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers[1,3]
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers[1:3]
small <- phone_numbers[x[x<5]]
small <- phone_numbers[x<5]
small <- phone_numbers[phone_numbers<=5]
# Exercise 2: indexing and filtering vectors
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- seq(21, 30)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten, next_ten)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2:5]
# Create a vector `even` that holds the even numbers from 1 to 100
filter <- c(TRUE, FALSE)
even <- all_numbers[filter]
print(even)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even, "%%", 2)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers[1:3]
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers[phone_numbers<=5]
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- phone_numbers[phone_numbers > 5]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers <- c(5, 5, 5, 5, 3, 0, 5)
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers <- c(8, 6, 0, 0, 0, 0, 0)
